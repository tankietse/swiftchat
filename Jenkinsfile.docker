pipeline {
    agent {
        docker {
            image 'maven:3.8.6-eclipse-temurin-17'
            args '-v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.m2:/root/.m2'
        }
    }
    
    environment {
        AUTH_SERVICE_PORT = '8081'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Auth Service') {
            steps {
                dir('auth-service') {
                    sh 'mvn clean package -DskipTests'
                    
                    // Only attempt to build Docker image if Docker socket is available
                    script {
                        try {
                            sh 'docker version'
                            sh 'docker build -t swiftchat/auth-service:latest .'
                            echo "Auth service Docker image built successfully"
                        } catch (Exception e) {
                            echo "Docker build failed, but JAR was created: ${e.message}"
                        }
                    }
                }
            }
            post {
                success {
                    echo 'Auth Service build successful'
                    archiveArtifacts artifacts: 'auth-service/target/*.jar', fingerprint: true
                }
                failure {
                    echo 'Auth Service build failed'
                }
            }
        }
        
        stage('Deploy Auth Service') {
            steps {
                script {
                    try {
                        sh 'docker-compose -f docker-compose.dev.yml up -d auth-service'
                        sh '''
                            echo "Waiting for Auth Service to start..."
                            sleep 30
                            curl -f http://localhost:8081/actuator/health || echo "Service may still be starting"
                        '''
                    } catch (Exception e) {
                        echo "Deployment failed: ${e.message}"
                        echo "JAR file is available in auth-service/target/ for manual deployment"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning workspace...'
            // cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo '''
                Pipeline failed!
                
                Possible solutions:
                1. Ensure Docker is properly installed on the Jenkins host
                2. Make sure Jenkins has permission to use Docker
                3. Consider running Jenkins in a Docker container with Docker-in-Docker capability
                4. Or use the docker agent as shown in this pipeline
            '''
        }
    }
}
