pipeline {
    agent any
    
    environment {
        SERVICE_NAME = 'auth-service'
        SERVICE_PORT = '8081'
        DOCKER_REGISTRY = 'registry.yourcompany.com'  // Replace with your actual Docker registry
        DOCKER_CREDENTIALS_ID = 'docker-registry-credentials'  // Update to actual credential ID in Jenkins
        PROD_SERVER = 'user@production-server.com'  // Replace with your production server SSH connection
        PROD_SERVER_CREDENTIALS_ID = 'prod-server-ssh'  // SSH credentials for production server
        // Use a volume mount to preserve Maven cache between builds
        MVN_CMD = 'docker run --rm -v "$(pwd)":/app -v maven-repo:/root/.m2 -w /app maven:3.8.6-eclipse-temurin-17 mvn'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Shared Libraries') {
            steps {
                // Build shared libraries first
                dir('../shared-libs') {
                    sh '${MVN_CMD} clean install -DskipTests'
                }
            }
        }
        
        stage('Build Auth Service') {
            steps {
                // Build auth service with dependencies
                sh '${MVN_CMD} clean package -DskipTests'
                sh 'docker build -t swiftchat/${SERVICE_NAME}:${BUILD_NUMBER} -t swiftchat/${SERVICE_NAME}:latest .'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Test') {
            steps {
                sh '${MVN_CMD} test'
                junit '**/target/surefire-reports/*.xml'
                jacoco execPattern: 'target/jacoco.exec'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                sh '${MVN_CMD} sonar:sonar -Dsonar.projectKey=swiftchat-auth-service -Dsonar.host.url=${SONAR_HOST_URL}'
            }
        }
        
        stage('Push Image') {
            when {
                branch 'main'  // Only push images from main branch
            }
            steps {
                withCredentials([string(credentialsId: "${DOCKER_CREDENTIALS_ID}", variable: 'DOCKER_PWD')]) {
                    sh 'echo $DOCKER_PWD | docker login ${DOCKER_REGISTRY} -u username --password-stdin'
                    sh 'docker tag swiftchat/${SERVICE_NAME}:latest ${DOCKER_REGISTRY}/swiftchat/${SERVICE_NAME}:latest'
                    sh 'docker push ${DOCKER_REGISTRY}/swiftchat/${SERVICE_NAME}:latest'
                    sh 'docker tag swiftchat/${SERVICE_NAME}:${BUILD_NUMBER} ${DOCKER_REGISTRY}/swiftchat/${SERVICE_NAME}:${BUILD_NUMBER}'
                    sh 'docker push ${DOCKER_REGISTRY}/swiftchat/${SERVICE_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'  // Only deploy from main branch
            }
            steps {
                input message: 'Deploy auth-service to production?', ok: 'Deploy'
                
                // Copy deployment files to production server
                sshagent([PROD_SERVER_CREDENTIALS_ID]) {
                    sh """
                        ssh ${PROD_SERVER} 'mkdir -p /opt/swiftchat/deployment /opt/swiftchat/config/auth-service'
                        scp docker-compose.prod.yml ${PROD_SERVER}:/opt/swiftchat/
                        scp ./src/main/resources/application-prod.properties ${PROD_SERVER}:/opt/swiftchat/config/auth-service/
                        
                        # Create .env file with secrets
                        echo 'Creating .env file with necessary secrets'
                        ssh ${PROD_SERVER} 'cat > /opt/swiftchat/.env << EOL
DB_USERNAME=postgres
DB_PASSWORD=\${DB_PROD_PASSWORD}
JWT_SECRET=\${JWT_PROD_SECRET}
JWT_EXPIRATION=900
JWT_REFRESH_EXPIRATION=604800
REDIS_PASSWORD=\${REDIS_PROD_PASSWORD}
SSL_KEY_STORE_PASSWORD=\${SSL_KEY_STORE_PASSWORD}
EOL'
                        
                        # Pull latest image and deploy
                        ssh ${PROD_SERVER} 'cd /opt/swiftchat && docker login ${DOCKER_REGISTRY} -u username -p \${DOCKER_REGISTRY_PASSWORD}'
                        ssh ${PROD_SERVER} 'cd /opt/swiftchat && docker pull ${DOCKER_REGISTRY}/swiftchat/${SERVICE_NAME}:latest'
                        ssh ${PROD_SERVER} 'cd /opt/swiftchat && docker-compose -f docker-compose.prod.yml up -d ${SERVICE_NAME}'
                        
                        # Wait for service to start
                        ssh ${PROD_SERVER} 'cd /opt/swiftchat && ./scripts/wait-for-service.sh ${SERVICE_NAME} ${SERVICE_PORT}'
                    """
                }
                
                // Verify deployment
                sshagent([PROD_SERVER_CREDENTIALS_ID]) {
                    sh "ssh ${PROD_SERVER} 'curl -k https://localhost:${SERVICE_PORT}/actuator/health || (echo \"Service health check failed\" && exit 1)'"
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Auth Service deployed to production successfully!'
            emailext subject: "SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                     body: "Auth Service built and deployed successfully. Check details at: ${env.BUILD_URL}",
                     to: 'team@swiftchat.com'
        }
        failure {
            echo 'Auth Service deployment failed!'
            emailext subject: "FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                     body: "Auth Service build or deployment failed. Check details at: ${env.BUILD_URL}",
                     to: 'team@swiftchat.com'
        }
    }
}
