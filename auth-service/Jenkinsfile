pipeline {
    agent any
    
    environment {
        SERVICE_NAME = 'auth-service'
        SERVICE_PORT = '8081'
        DOCKER_REGISTRY = 'your-registry-url'
        DOCKER_CREDENTIALS_ID = 'docker-cred-id'
        // Use a direct docker maven command
        MVN_CMD = 'docker run --rm -v "$(pwd)":/app -w /app maven:3.8.6-eclipse-temurin-17 mvn'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                sh '${MVN_CMD} clean package'
                sh 'docker build -t swiftchat/${SERVICE_NAME}:${BUILD_NUMBER} -t swiftchat/${SERVICE_NAME}:latest .'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Test') {
            steps {
                sh '${MVN_CMD} test'
                junit '**/target/surefire-reports/*.xml'
            }
        }
        
        stage('SonarQube Analysis') {
            when {
                expression { return false } // Disable until SonarQube is properly configured
            }
            steps {
                withSonarQubeEnv('SonarServer') {
                    sh '${MVN_CMD} sonar:sonar'
                }
            }
        }
        
        stage('Push Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                withCredentials([string(credentialsId: "${DOCKER_CREDENTIALS_ID}", variable: 'DOCKER_PWD')]) {
                    sh 'echo $DOCKER_PWD | docker login ${DOCKER_REGISTRY} -u username --password-stdin'
                    sh 'docker tag swiftchat/${SERVICE_NAME}:latest ${DOCKER_REGISTRY}/swiftchat/${SERVICE_NAME}:latest'
                    sh 'docker push ${DOCKER_REGISTRY}/swiftchat/${SERVICE_NAME}:latest'
                    sh 'docker tag swiftchat/${SERVICE_NAME}:${BUILD_NUMBER} ${DOCKER_REGISTRY}/swiftchat/${SERVICE_NAME}:${BUILD_NUMBER}'
                    sh 'docker push ${DOCKER_REGISTRY}/swiftchat/${SERVICE_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        
        stage('Deploy to Dev') {
            when {
                branch 'develop'
            }
            steps {
                sh 'docker-compose -f docker-compose.dev.yml up -d ${SERVICE_NAME}'
                sh '''
                    # Wait for service to be healthy
                    max_attempts=12
                    counter=0
                    echo "Waiting for Auth Service to become available..."
                    
                    until curl -s http://localhost:${SERVICE_PORT}/actuator/health | grep -q "UP" || [ $counter -eq $max_attempts ]
                    do
                      sleep 10
                      counter=$((counter + 1))
                      echo "Attempt $counter of $max_attempts"
                    done
                    
                    if [ $counter -eq $max_attempts ]; then
                      echo "Failed to start Auth Service"
                      exit 1
                    else
                      echo "Auth Service started successfully"
                    fi
                '''
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Deploy to production?', ok: 'Deploy'
                sh 'docker-compose -f docker-compose.prod.yml up -d ${SERVICE_NAME}'
                sh 'sleep 60' // Give the service time to start
                sh 'curl -f http://localhost:${SERVICE_PORT}/actuator/health || (echo "Service health check failed" && exit 1)'
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
